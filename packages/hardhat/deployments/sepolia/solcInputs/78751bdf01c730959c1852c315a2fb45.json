{
  "language": "Solidity",
  "sources": {
    "contracts/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Useful for debugging. Remove when deploying to a live network.\n// import \"hardhat/console.sol\";\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * A smart contract that allows changing a state variable of the contract and tracking the changes\n * It also allows the owner to withdraw the Ether in the contract\n * @author BuidlGuidl\n */\ncontract YourContract {\n\n    struct User {\n        string name;\n        uint256 age;\n        string profession;\n        string bio;\n    }\n\n    mapping (address => User) private users;\n\n    event userInfoAdded(address indexed user);\n\n    function setUserInfo(string memory _name, uint256 _age, string memory _profession, string memory _bio) public {\n        users[msg.sender] = User(_name, _age, _profession, _bio);\n        emit userInfoAdded(msg.sender);\n    }\n\n    function getUserInfo(address userAddress) public view returns(string memory, uint256, string memory, string memory) {\n        User memory u = users[userAddress];\n        return (u.name, u.age, u.profession, u.bio);\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}